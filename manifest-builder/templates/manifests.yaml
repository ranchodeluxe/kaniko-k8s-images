apiVersion: v1
kind: ConfigMap
metadata:
  name: kubectl-installation-busybox
  namespace: argocd
data:
  terminate-cmd: |
    #!/bin/sh
    /busybox/wget --no-check-certificate \
        -O /busybox/kubectl "https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl"
    chmod 777 /busybox/kubectl
    query=$(kubectl get pods -o jsonpath='{.status.containerStatuses[0].state.terminated.reason}' $HOSTNAME)
    if [ "$query" = "Completed" ];
    then
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Event
    metadata:
      name: early-termination
      namespace: argocd
    type: Normal
    message: '[ TERMINATION QUERY ]: status already \'Completed\', exiting...'
    involvedObject:
      kind: Pod
    EOF
    # container status of `exit 0` should translate to `-o jsonpath='{.status.phase}' = "Succeedeed"`
    exit 0
    else
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Event
    metadata:
      name: early-termination
      namespace: argocd
    type: Normal
    message: '[ TERMINATION QUERY ]: status not \'Completed\', continuing onto next step...'
    involvedObject:
      kind: Pod
    EOF
    # don't use an exit status so it moves onto the next step
    fi
---
{{- range $filepath, $_ := .Files.Glob "dockerfile_inputs/**" -}}
{{- if (hasSuffix "Dockerfile" $filepath) }}
{{- $dockersha256 := (sha256sum ($.Files.Get $filepath)) }}
{{- $basename := ($filepath | regexFind "[a-zA-Z0-9.-]*:[a-zA-Z0-9.-]*" | replace ":" "-" ) }}
{{- $sha_suffix := substr 0 10 $dockersha256 }}
{{- $basename_sha_suffix := printf "%s-%s" $basename $sha_suffix }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-{{ $basename_sha_suffix }}
  namespace: argocd
data:
  dockerfile: |
  {{- $.Files.Get $filepath | nindent 4 }}
---

apiVersion: v1
kind: Pod
metadata:
  name: pod-job-{{ $basename_sha_suffix }}
  namespace: argocd
  labels:
    app: kaniko-containerized-job
spec:
  restartPolicy: Never
  # next two lines bind service account to Pod
  serviceAccountName: kaniko-get-list-pod-serviceaccount
  automountServiceAccountToken: true
  containers:
  - name:  pod-job-{{ $basename_sha_suffix }}
    image: gcr.io/kaniko-project/executor:debug
    args: [
             "--context=dir://workspace",
             {{- $versionlookuppath := ($filepath | replace ":" "-" ) }}
             {{- $version := get $.Values.versionLookup $versionlookuppath -}}
             {{- $destination := printf "\"--destination=gcorradini2023/%s:%s\"" $basename $version -}}
             {{ $destination | nindent 13 }},
             "--dockerfile=Dockerfile"
    ]
    {{- if contains "ubuntu" $basename }}
    resources:
      requests:
        memory: "500Mi"
        cpu: "300m"
      limits:
        memory: "768Mi"
        cpu: "500m"
    {{- end }}
    volumeMounts:
      - name: dockerhub-regcred-secret
        mountPath: /kaniko/.docker
      - name: dockerfile-volume
        mountPath: /workspace
      - name: kubectl-installation-busybox
        mountPath: /usr/local/bin/
    lifecycle:
      postStart:
        exec:
          command: [ "/bin/sh", "-c", "kubectl-install-check-status-query.sh" ]
  volumes:
    - name: dockerhub-regcred-secret
      secret:
        secretName: dockerhub-regcred
        items:
          - key: .dockerconfigjson
            path: config.json
    - name: dockerfile-volume
      configMap:
        name: configmap-{{ $basename_sha_suffix }}
        items:
          - key: dockerfile
            path: Dockerfile
    - name: kubectl-installation-busybox
      configMap:
        name: kubectl-installation-busybox
        items:
          - key:  terminate-cmd
            path: kubectl-install-check-status-query.sh
            mode: 0777
---
{{- end }}
{{- end }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kaniko-get-list-pod-serviceaccount
  namespace: argocd
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kaniko-pod-reader-role
  namespace: argocd
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kaniko-pod-reader-role-binding
  namespace: argocd
subjects:
- kind: ServiceAccount
  name: kaniko-get-list-pod-serviceaccount
  namespace: argocd
roleRef:
  kind: Role
  name: kaniko-pod-reader-role
  apiGroup: rbac.authorization.k8s.io