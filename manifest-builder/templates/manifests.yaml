apiVersion: v1
kind: ConfigMap
metadata:
  name: kubectl-installation-debian
  namespace: argocd
data:
  kubectl-install-script: |
    #!/bin/sh
    #set -euo pipefail

    apt update \
     && apt -y install ca-certificates curl \
     && curl -Lk "https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl" --output /usr/local/sbin/kubectl \
     && chmod 777 /usr/local/sbin/kubectl
---
{{- range $filepath, $_ := .Files.Glob "dockerfile_inputs/**" -}}
{{- if (hasSuffix "Dockerfile" $filepath) }}
{{- $dockersha256 := (sha256sum ($.Files.Get $filepath)) }}
{{- $basename := ($filepath | regexFind "[a-zA-Z0-9.-]*:[a-zA-Z0-9.-]*" | replace ":" "-" ) }}
{{- $sha_suffix := substr 0 10 $dockersha256 }}
{{- $basename_sha_suffix := printf "%s-%s" $basename $sha_suffix }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-{{ $basename_sha_suffix }}
  namespace: argocd
data:
  dockerfile: |
  {{- $.Files.Get $filepath | nindent 4 }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: job-{{ $basename_sha_suffix }}
  namespace: argocd
  labels:
    app: kaniko-job
spec:
# ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: Never
      # next two lines bind service account to Pod
      serviceAccountName: kaniko-get-list-pod-serviceaccount
      automountServiceAccountToken: true
      containers:
      - name:  pod-job-{{ $basename_sha_suffix }}
        image: gcr.io/kaniko-project/executor:debug
        args: [
                 "--context=dir://workspace",
                 {{- $versionlookuppath := ($filepath | replace ":" "-" ) }}
                 {{- $version := get $.Values.versionLookup $versionlookuppath -}}
                 {{- $destination := printf "\"--destination=gcorradini2023/%s:%s\"" $basename $version -}}
                 {{ $destination | nindent 17 }},
                 "--dockerfile=Dockerfile"
        ]
        volumeMounts:
          - name: dockerhub-regcred-secret
            mountPath: /kaniko/.docker
          - name: dockerfile-volume
            mountPath: /workspace
        {{- if contains "ubuntu" $basename }}
          - name: kubectl-installation-debian
            mountPath: /usr/local/bin/
        lifecycle:
          postStart:
            exec:
              command: [ "/bin/sh", "-c", "kubectl-install-script.sh && if [ $(kubectl get pods -o jsonpath='{.status.containerStatuses[0].state.terminated.reason}' $HOSTNAME) = Completed ]; then exit 0; else exit 1; fi" ]
        {{- end }}
      volumes:
        - name: dockerhub-regcred-secret
          secret:
            secretName: dockerhub-regcred
            items:
              - key: .dockerconfigjson
                path: config.json
        - name: dockerfile-volume
          configMap:
            name: configmap-{{ $basename_sha_suffix }}
            items:
              - key: dockerfile
                path: Dockerfile
        {{- if contains "ubuntu" $basename }}
        - name: kubectl-installation-debian
          configMap:
            name: kubectl-installation-debian
            items:
              - key: kubectl-install-script
                path: kubectl-install-script.sh
                mode: 0777
        {{- end }}
---
{{- end }}
{{- end }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kaniko-get-list-pod-serviceaccount
  namespace: argocd
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kaniko-pod-reader-role
  namespace: argocd
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kaniko-pod-reader-role-binding
  namespace: argocd
subjects:
- kind: ServiceAccount
  name: kaniko-get-list-pod-serviceaccount
  namespace: argocd
roleRef:
  kind: Role
  name: kaniko-pod-reader-role
  apiGroup: rbac.authorization.k8s.io